<%
  require 'uri'
  # pulling from APP_URL kept for backward-compatibility, but should only ever contain a domain name
  APP_DOMAIN = ENV.fetch('APP_DOMAIN', ENV.fetch('APP_URL', 'app.invalid'))
  CG_ENVIRONMENT = ENV.fetch('CG_ENVIRONMENT', 'local')
  RAILS_ENV = ENV.fetch('RAILS_ENV', 'production')
  GEM_HOME = ENV.fetch('GEM_HOME', '')
  PASSENGER_ROOT = ENV.fetch('PASSENGER_ROOT', '')

  LEGACY_PORTS = ENV.fetch('LEGACY_PORTS', '1') == '1'
  HTTP_PORT = ENV.fetch('CG_HTTP_PORT', LEGACY_PORTS ? '81' : '8080')
  HTTP_PORT = nil if HTTP_PORT.empty?
  HTTPS_PORT = ENV.fetch('CG_HTTPS_PORT', LEGACY_PORTS ? '80' : '8443')
  HTTPS_PORT = nil if HTTPS_PORT.empty?

  APP_PORT = HTTPS_PORT || HTTP_PORT
  #APP_PORT = 8080
  REDIRECT_PORT = HTTP_PORT != HTTPS_PORT ? HTTP_PORT : nil
  APP_ROOT_PATH = ENV.fetch('APP_ROOT_PATH', '/opt/yakitory')
%>
# Click-AP / Yakitory / Nginx.conf Template generate.
worker_processes <%= ENV.fetch('NGINX_WORKER_COUNT', (RAILS_ENV == 'production' ? 'auto' : 1)) %>;
pid              logs/mvideo2.pid;

# prevent halting (http://nginx.org/en/docs/ngx_core_module.html#daemon)
daemon off;
user   vagrant;

# Add files to white list env variables
include /opt/nginx/main.d/*.conf;

# Ubuntu 18 requires this for nginx+passenger to work.
#include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections <%= ENV.fetch('NGINX_WORKER_CONNECTIONS', '1024') %>;
}

http {
    <% if CG_ENVIRONMENT != 'local' %>
        log_format combined_json escape=json '{ '
          '"amzn_trace_id": "$http_x_amzn_trace_id", '
          '"body_bytes_sent": "$body_bytes_sent", '
          '"http_referrer": "$http_referer", '
          '"http_user_agent": "$http_user_agent", '
          '"remote_addr": "$remote_addr", '
          '"remote_user": "$remote_user", '
          '"request": "$request", '
          '"path": "$request_uri", '
          '"request_context_id": "$http_x_request_context_id", '
          '"request_hostname": "$host", '
          '"request_id": "$request_id", '
          '"request_time": "$request_time", '
          '"status": "$status", '
          '"time_local": "$time_local" '
          '}';
        access_log /opt/nginx/logs/access.log combined_json;
    <% else %>
        access_log /opt/nginx/logs/access.log;
    <% end %>
    error_log /opt/nginx/logs/error.log;

    passenger_default_user vagrant;
    passenger_user vagrant;

    passenger_friendly_error_pages off;
    passenger_show_version_in_header off;

    # /opt/rubies/ruby-1.9.3-p547/lib/ruby/gems/1.9.1/gems/passenger-6.0.2;
    passenger_root /opt/rubies/ruby-1.9.3-p547/lib/ruby/gems/1.9.1/gems/passenger-6.0.2;
    passenger_ruby /opt/rubies/ruby-1.9.3-p547/bin/ruby;

    passenger_app_env <%= RAILS_ENV %>;
    passenger_max_pool_size <%= ENV.fetch('PASSENGER_MAX_POOL_SIZE', '6') %>;
    passenger_max_request_queue_size <%= ENV.fetch('PASSENGER_MAX_REQUEST_QUEUE_SIZE', '100') %>;
    passenger_min_instances <%= ENV.fetch('PASSENGER_MIN_INSTANCES', '1') %>;
    passenger_start_timeout <%= ENV.fetch('PASSENGER_STARTUP_TIMEOUT', '90') %>;

    passenger_pre_start <%= URI.parse("http://#{APP_DOMAIN}:#{APP_PORT}").merge(ENV.fetch('CG_INSTANCE_POOL_HEALTH_CHECK_PATH', '/')) %>;

    <% if ENV.key? 'PASSENGER_SPAWN_METHOD' %>
      # In some cases, the default "smart" spawn method might cause issues.
      # As an escape hatch, expose the spawn method for configuration.
      # Allowable values: "smart", "direct"
      passenger_spawn_method <%= ENV.fetch('PASSENGER_SPAWN_METHOD') %>;
    <% end %>

    more_clear_headers 'X-Powered-By';
    passenger_set_header X-Request-Id $request_id;
    server_tokens off;
    client_body_timeout    65;
    client_header_timeout  65;
    client_max_body_size <%= ENV.fetch('NGINX_MAX_UPLOAD_SIZE', '10m') %>;

    include       mime.types;
    default_type  application/octet-stream;

    # Add files here to add additional nginx options
    #include      /opt/yakitory/config/nginxconf.d/*.conf;

    sendfile        on;
    keepalive_timeout  65;

    map $uri $file_name {
        default none;
        "~*(?<name>/\d*/.*).m3u8" $name;            # e.g. Big_Buck_Bunny_480p.m3u8 - 'Big_Buck_Bunny_480p'
        "~*(?<name>/\d*/.*)-(?<num>\d*).ts" $name;  # e.g. Big_Buck_Bunny_480p-123.ts is 'Big_Buck_Bunny_480p'
    }

    server {
        listen       <%= APP_PORT %>;
        server_name  <%= APP_DOMAIN %>;
        #server_name localhost;
        #listen 80 default_server;
        #listen [::]:80 default_server;

        root               <%= APP_ROOT_PATH %>/public;
        passenger_enabled  on;
        passenger_app_root <%= APP_ROOT_PATH %>;

        <% if CG_ENVIRONMENT != 'local' %>
            add_header Strict-Transport-Security "max-age=31536000" always;

            set_real_ip_from 10.0.0.0/8;
            real_ip_header X-Forwarded-For;
            real_ip_recursive on;
        <% end %>

        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

        location /videos {
            rewrite  /hls/([a-zA-Z0-9_\-]*)/([0-9]*)/(.*)\.(ts|m3u8|key)$ /hls/$3.$4?token=$1&expires=$2;
        }

        location /hls {
            internal;
            add_header 'Access-Control-Allow-Origin' '*';
            secure_link $arg_token,$arg_expires;
            secure_link_md5 "$arg_expires$file_name enigma";

            #default_type text/plain;
            #echo filename: $file_name;
            #echo arg_md5:  $arg_token;
            #echo arg_exp:  $arg_expires;
            #echo uri: $uri;               # /hls/1/Big_Buck_Bunny_480p-0.ts
            #echo secure_link $secure_link;

            if ($secure_link = "") { return 403; }
            if ($secure_link = "0") { return 410; }
        }

        # Upload form should be submitted to this location
        location ~* \/api\/clients\/([0-9]+)\/videos\/upload {
            passenger_enabled on;
            # Pass altered request body to this location
            upload_pass   @test;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
            upload_store <%= APP_ROOT_PATH %>/public/data/tmp_uploads;

            # Allow uploaded files to be read only by user
            upload_store_access user:rw group:rw all:rw;

            # Set specified fields in request body
            upload_set_form_field video[filename] "$upload_file_name";
            upload_set_form_field video[content_type] "$upload_content_type";
            upload_set_form_field video[filepath] "$upload_tmp_path";

            # Inform backend about hash and size of a file
            upload_aggregate_form_field "video[md5]" "$upload_file_md5";
            upload_aggregate_form_field "video[size]" "$upload_file_size";

            # Pass all params back to the backend
            upload_pass_form_field ".*";

            # upload_cleanup 400 404 499 500-505;
            upload_cleanup 505;
        }

        # Pass altered request body to a backend
        location @test {
            passenger_enabled on;
        }

        <% if CG_ENVIRONMENT != 'local' %>
            # Match the health check path separately to prevent interference with the health check
            location <%= ENV.fetch('CG_INSTANCE_POOL_HEALTH_CHECK_PATH') %> {
                passenger_enabled on;
            }
        <% end %>

        location ~ /\.git {
            deny all;
        }

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
